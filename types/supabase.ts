/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/ticket": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket.id"];
          isalive?: parameters["rowFilter.ticket.isalive"];
          ticket_type_id?: parameters["rowFilter.ticket.ticket_type_id"];
          user_id?: parameters["rowFilter.ticket.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ticket"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ticket */
          ticket?: definitions["ticket"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket.id"];
          isalive?: parameters["rowFilter.ticket.isalive"];
          ticket_type_id?: parameters["rowFilter.ticket.ticket_type_id"];
          user_id?: parameters["rowFilter.ticket.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ticket.id"];
          isalive?: parameters["rowFilter.ticket.isalive"];
          ticket_type_id?: parameters["rowFilter.ticket.ticket_type_id"];
          user_id?: parameters["rowFilter.ticket.user_id"];
        };
        body: {
          /** ticket */
          ticket?: definitions["ticket"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tickettype": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tickettype.id"];
          name?: parameters["rowFilter.tickettype.name"];
          description?: parameters["rowFilter.tickettype.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tickettype"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tickettype */
          tickettype?: definitions["tickettype"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tickettype.id"];
          name?: parameters["rowFilter.tickettype.name"];
          description?: parameters["rowFilter.tickettype.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tickettype.id"];
          name?: parameters["rowFilter.tickettype.name"];
          description?: parameters["rowFilter.tickettype.description"];
        };
        body: {
          /** tickettype */
          tickettype?: definitions["tickettype"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/userrole": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.userrole.id"];
          name?: parameters["rowFilter.userrole.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["userrole"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** userrole */
          userrole?: definitions["userrole"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.userrole.id"];
          name?: parameters["rowFilter.userrole.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.userrole.id"];
          name?: parameters["rowFilter.userrole.name"];
        };
        body: {
          /** userrole */
          userrole?: definitions["userrole"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          surname?: parameters["rowFilter.users.surname"];
          user_role_id?: parameters["rowFilter.users.user_role_id"];
          email?: parameters["rowFilter.users.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          surname?: parameters["rowFilter.users.surname"];
          user_role_id?: parameters["rowFilter.users.user_role_id"];
          email?: parameters["rowFilter.users.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          surname?: parameters["rowFilter.users.surname"];
          user_role_id?: parameters["rowFilter.users.user_role_id"];
          email?: parameters["rowFilter.users.email"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  ticket: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    isalive?: boolean;
    /**
     * Note:
     * This is a Foreign Key to `tickettype.id`.<fk table='tickettype' column='id'/>
     */
    ticket_type_id?: number;
    /**
     * Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id?: string;
  };
  tickettype: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name?: string;
    description?: string;
  };
  userrole: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name: string;
  };
  users: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    name?: string;
    surname?: string;
    /**
     * Note:
     * This is a Foreign Key to `userrole.id`.<fk table='userrole' column='id'/>
     */
    user_role_id?: number;
    email: string;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** ticket */
  "body.ticket": definitions["ticket"];
  "rowFilter.ticket.id": string;
  "rowFilter.ticket.isalive": string;
  "rowFilter.ticket.ticket_type_id": string;
  "rowFilter.ticket.user_id": string;
  /** tickettype */
  "body.tickettype": definitions["tickettype"];
  "rowFilter.tickettype.id": string;
  "rowFilter.tickettype.name": string;
  "rowFilter.tickettype.description": string;
  /** userrole */
  "body.userrole": definitions["userrole"];
  "rowFilter.userrole.id": string;
  "rowFilter.userrole.name": string;
  /** users */
  "body.users": definitions["users"];
  "rowFilter.users.id": string;
  "rowFilter.users.name": string;
  "rowFilter.users.surname": string;
  "rowFilter.users.user_role_id": string;
  "rowFilter.users.email": string;
}

export interface operations {}

export interface external {}
