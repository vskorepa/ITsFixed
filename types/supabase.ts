/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Operator": {
    get: {
      parameters: {
        query: {
          operatorId?: parameters["rowFilter.Operator.operatorId"];
          operatorEmail?: parameters["rowFilter.Operator.operatorEmail"];
          operatorName?: parameters["rowFilter.Operator.operatorName"];
          operatorSurname?: parameters["rowFilter.Operator.operatorSurname"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Operator"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Operator */
          Operator?: definitions["Operator"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          operatorId?: parameters["rowFilter.Operator.operatorId"];
          operatorEmail?: parameters["rowFilter.Operator.operatorEmail"];
          operatorName?: parameters["rowFilter.Operator.operatorName"];
          operatorSurname?: parameters["rowFilter.Operator.operatorSurname"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          operatorId?: parameters["rowFilter.Operator.operatorId"];
          operatorEmail?: parameters["rowFilter.Operator.operatorEmail"];
          operatorName?: parameters["rowFilter.Operator.operatorName"];
          operatorSurname?: parameters["rowFilter.Operator.operatorSurname"];
        };
        body: {
          /** Operator */
          Operator?: definitions["Operator"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Ticket": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Ticket.id"];
          isAlive?: parameters["rowFilter.Ticket.isAlive"];
          createdAt?: parameters["rowFilter.Ticket.createdAt"];
          updatedAt?: parameters["rowFilter.Ticket.updatedAt"];
          operatorId?: parameters["rowFilter.Ticket.operatorId"];
          userId?: parameters["rowFilter.Ticket.userId"];
          ticketProblemId?: parameters["rowFilter.Ticket.ticketProblemId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Ticket"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Ticket */
          Ticket?: definitions["Ticket"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Ticket.id"];
          isAlive?: parameters["rowFilter.Ticket.isAlive"];
          createdAt?: parameters["rowFilter.Ticket.createdAt"];
          updatedAt?: parameters["rowFilter.Ticket.updatedAt"];
          operatorId?: parameters["rowFilter.Ticket.operatorId"];
          userId?: parameters["rowFilter.Ticket.userId"];
          ticketProblemId?: parameters["rowFilter.Ticket.ticketProblemId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Ticket.id"];
          isAlive?: parameters["rowFilter.Ticket.isAlive"];
          createdAt?: parameters["rowFilter.Ticket.createdAt"];
          updatedAt?: parameters["rowFilter.Ticket.updatedAt"];
          operatorId?: parameters["rowFilter.Ticket.operatorId"];
          userId?: parameters["rowFilter.Ticket.userId"];
          ticketProblemId?: parameters["rowFilter.Ticket.ticketProblemId"];
        };
        body: {
          /** Ticket */
          Ticket?: definitions["Ticket"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/TicketType": {
    get: {
      parameters: {
        query: {
          ticketTypeId?: parameters["rowFilter.TicketType.ticketTypeId"];
          ticketProblem?: parameters["rowFilter.TicketType.ticketProblem"];
          ticketDescription?: parameters["rowFilter.TicketType.ticketDescription"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["TicketType"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** TicketType */
          TicketType?: definitions["TicketType"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          ticketTypeId?: parameters["rowFilter.TicketType.ticketTypeId"];
          ticketProblem?: parameters["rowFilter.TicketType.ticketProblem"];
          ticketDescription?: parameters["rowFilter.TicketType.ticketDescription"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          ticketTypeId?: parameters["rowFilter.TicketType.ticketTypeId"];
          ticketProblem?: parameters["rowFilter.TicketType.ticketProblem"];
          ticketDescription?: parameters["rowFilter.TicketType.ticketDescription"];
        };
        body: {
          /** TicketType */
          TicketType?: definitions["TicketType"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/User": {
    get: {
      parameters: {
        query: {
          userEmail?: parameters["rowFilter.User.userEmail"];
          userId?: parameters["rowFilter.User.userId"];
          userName?: parameters["rowFilter.User.userName"];
          userSurname?: parameters["rowFilter.User.userSurname"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["User"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** User */
          User?: definitions["User"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          userEmail?: parameters["rowFilter.User.userEmail"];
          userId?: parameters["rowFilter.User.userId"];
          userName?: parameters["rowFilter.User.userName"];
          userSurname?: parameters["rowFilter.User.userSurname"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          userEmail?: parameters["rowFilter.User.userEmail"];
          userId?: parameters["rowFilter.User.userId"];
          userName?: parameters["rowFilter.User.userName"];
          userSurname?: parameters["rowFilter.User.userSurname"];
        };
        body: {
          /** User */
          User?: definitions["User"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/_prisma_migrations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_prisma_migrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  Operator: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    operatorId: string;
    operatorEmail: string;
    operatorName: string;
    operatorSurname?: string;
  };
  Ticket: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    isAlive: boolean;
    createdAt: string;
    updatedAt: string;
    /**
     * Note:
     * This is a Foreign Key to `Operator.operatorId`.<fk table='Operator' column='operatorId'/>
     */
    operatorId?: string;
    /**
     * Note:
     * This is a Foreign Key to `User.userId`.<fk table='User' column='userId'/>
     */
    userId?: string;
    /**
     * Note:
     * This is a Foreign Key to `TicketType.ticketTypeId`.<fk table='TicketType' column='ticketTypeId'/>
     */
    ticketProblemId?: string;
  };
  TicketType: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    ticketTypeId: string;
    ticketProblem: string;
    ticketDescription: string;
  };
  User: {
    userEmail: string;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    userId: string;
    userName: string;
    userSurname?: string;
  };
  _prisma_migrations: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    checksum: string;
    finished_at?: string;
    migration_name: string;
    logs?: string;
    rolled_back_at?: string;
    started_at: string;
    applied_steps_count: number;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** Operator */
  "body.Operator": definitions["Operator"];
  "rowFilter.Operator.operatorId": string;
  "rowFilter.Operator.operatorEmail": string;
  "rowFilter.Operator.operatorName": string;
  "rowFilter.Operator.operatorSurname": string;
  /** Ticket */
  "body.Ticket": definitions["Ticket"];
  "rowFilter.Ticket.id": string;
  "rowFilter.Ticket.isAlive": string;
  "rowFilter.Ticket.createdAt": string;
  "rowFilter.Ticket.updatedAt": string;
  "rowFilter.Ticket.operatorId": string;
  "rowFilter.Ticket.userId": string;
  "rowFilter.Ticket.ticketProblemId": string;
  /** TicketType */
  "body.TicketType": definitions["TicketType"];
  "rowFilter.TicketType.ticketTypeId": string;
  "rowFilter.TicketType.ticketProblem": string;
  "rowFilter.TicketType.ticketDescription": string;
  /** User */
  "body.User": definitions["User"];
  "rowFilter.User.userEmail": string;
  "rowFilter.User.userId": string;
  "rowFilter.User.userName": string;
  "rowFilter.User.userSurname": string;
  /** _prisma_migrations */
  "body._prisma_migrations": definitions["_prisma_migrations"];
  "rowFilter._prisma_migrations.id": string;
  "rowFilter._prisma_migrations.checksum": string;
  "rowFilter._prisma_migrations.finished_at": string;
  "rowFilter._prisma_migrations.migration_name": string;
  "rowFilter._prisma_migrations.logs": string;
  "rowFilter._prisma_migrations.rolled_back_at": string;
  "rowFilter._prisma_migrations.started_at": string;
  "rowFilter._prisma_migrations.applied_steps_count": string;
}

export interface operations {}

export interface external {}
